const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js')
const { SlashCommandBuilder } = require('@discordjs/builders');
const plural = require('plural-ru')
const cooldown = new Set();

module.exports = {
  data: new SlashCommandBuilder()
      .setName("bomber")
      .setDescription("–ü–∏–Ω–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è n —Ä–∞–∑")
      .addUserOption(option => option.setName("user").setDescription("–ö–æ–º—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–º–±–µ—Ä?").setRequired(true))
      .addIntegerOption(option => option.setName("count").setDescription("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 100 —Ä–∞–∑.").setRequired(true))
      .addStringOption(option => option.setName("text").setDescription("–∫–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å?").setRequired(true)),
  async execute(interaction, client) {
  const user = interaction.options.getUser("user")
  const count = interaction.options.getInteger("count")
  const string = interaction.options.getString("text")
  let stop = false;

      if (count > 100 || count <= 0) {
        return interaction.reply({
          content: "–í—Å–µ-—Ç–∞–∫–∏, –º–Ω–µ –∑–∞ –Ω–µ–≥–æ —Ç–æ–∂–µ —Å—Ç—Ä–∞—à–Ω–æ –±—É–¥–µ—Ç, —Ç–∞–∫ —á—Ç–æ –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –Ω–µ –±–æ–ª—å—à–µ 100 –∏ –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è"
        })
      } else if (string.length > 2000) {
        return interaction.reply({
          content: "–Ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 2–∫ —Å–∏–º–≤–æ–ª–æ–≤"
        })
      } else {
        if (cooldown.has(interaction.user.id)) {
          return interaction.reply({
            embeds: [new MessageEmbed()
              .setTitle("**‚öíÔ∏è | –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞**")
              .setDescription(`–°–ª–µ–¥—É—é—â–∏–π –±–æ–º–±–µ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å <t:${60 + Date.now() / 1000 | 0}:R> –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–æ–º–±–µ—Ä–∞.`)
            ], ephemeral: true
          }) 
        } else {
         cooldown.add(interaction.user.id)
          setTimeout(() => {
            cooldown.delete(interaction.user.id)
          }, 60000);

          const stop_button = new MessageActionRow()
              .addComponents(
                new MessageButton() 
                  .setStyle("DANGER")
                  .setLabel(`–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ`)
                  .setEmoji("<:stop:963452446594703461>") 
                  .setCustomId("stop_button"))
          const stop_xd = new MessageActionRow()
              .addComponents( 
                new MessageButton() 
                  .setStyle("DANGER")
                  .setLabel(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ`)
                  .setEmoji("<:success:963452456984006736>") 
                  .setCustomId("stop")
                  .setDisabled(true))
              
      const message = await interaction.reply({
         embeds: [new MessageEmbed()
           .setTitle("**üí£ | –ó–∞–ø—É—â–µ–Ω –±–æ–º–±–µ—Ä**")
           .addFields(
              { name: "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**", value: user.toString(), inline: true},
              { name: "**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±:**", value: count.toString(), inline: true}
           )
           .setColor("#257bc9")
           ], components: [stop_button], fetchReply: true})

       const filter = i => i.customId === 'stop_button' && i.user.id === interaction.user.id;
       const collector = message.createMessageComponentCollector({ filter, time: (count + client.ws.ping) * 1000, max: 1, errors: ['time'] });
       const amount = count
       let i = count

       collector.on('collect', async (bomber) => {
        stop = true; 
         return bomber.update({ 
           embeds: [new MessageEmbed()
             .setTitle("**–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞**")
             .addFields(
              { name: "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**", value: user.toString(), inline: true},
              { name: "**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±:**", value: count.toString(), inline: true}
            )
            .setFooter({ text: `–ë—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ ${amount - i + 1} ${plural(amount - i + 1, "–±–æ–º–±–∞", "–±–æ–º–±—ã", "–±–æ–º–±")}`})
            .setColor("RANDOM")
          ], components: [stop_xd]})
       });

       const sleep = (ms = 1000) => {
         return new Promise(r => setTimeout(() => r(true), ms)) 
       }
     
         for (; i > 0 && !stop; i--) {
                await sleep();
                await client.channels.cache.get("942838131617579029").send({  
                  content: `${user}`,
                  embeds: [new MessageEmbed()
                     .setDescription(`${string}`)
                     .setFooter({ text: `${plural(i-1, "–æ—Å—Ç–∞–ª—Å—è ", "–æ—Å—Ç–∞–ª–æ—Å—å ", "–æ—Å—Ç–∞–ª–æ—Å—å ") + 
                     `${i-1}` + plural(i-1, " –ø–∏–Ω–≥", " –ø–∏–Ω–≥–∞", " –ø–∏–Ω–≥–æ–≤")}`})
                     .setColor("#2F3136")
                 ],
               }).catch(() => {})
         } 

           await client.channels.cache.get("942838131617579029").send({content: "**=========END=========**"})
            if (stop === false) {
              await interaction.editReply({
                embeds: [new MessageEmbed()
                   .setTitle("**–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞**")
                   .addFields(
                     { name: "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**", value: user.toString(), inline: true},
                     { name: "**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±:**", value: count.toString(), inline: true}
                   )
                   .setFooter({ text: `–ë—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ –≤—Å–µ ${amount} ${plural(amount, "–±–æ–º–±–∞", "–±–æ–º–±—ã", "–±–æ–º–±")}`})
                   .setColor("RANDOM")
                  ], components: [stop_xd]}).catch(() => {});
             }
          }
        }
      }
    }


